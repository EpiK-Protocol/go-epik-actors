// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package vote

import (
	"fmt"
	"io"

	abi "github.com/filecoin-project/go-state-types/abi"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf

var lengthBufState = []byte{132}

func (t *State) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufState); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.TotalRewards (big.Int) (struct)
	if err := t.TotalRewards.MarshalCBOR(w); err != nil {
		return err
	}

	// t.TotalValidVotes (big.Int) (struct)
	if err := t.TotalValidVotes.MarshalCBOR(w); err != nil {
		return err
	}

	// t.Candidates (cid.Cid) (struct)

	if err := cbg.WriteCidBuf(scratch, w, t.Candidates); err != nil {
		return xerrors.Errorf("failed to write cid field t.Candidates: %w", err)
	}

	// t.Voters (cid.Cid) (struct)

	if err := cbg.WriteCidBuf(scratch, w, t.Voters); err != nil {
		return xerrors.Errorf("failed to write cid field t.Voters: %w", err)
	}

	return nil
}

func (t *State) UnmarshalCBOR(r io.Reader) error {
	*t = State{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 4 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.TotalRewards (big.Int) (struct)

	{

		if err := t.TotalRewards.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.TotalRewards: %w", err)
		}

	}
	// t.TotalValidVotes (big.Int) (struct)

	{

		if err := t.TotalValidVotes.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.TotalValidVotes: %w", err)
		}

	}
	// t.Candidates (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(br)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.Candidates: %w", err)
		}

		t.Candidates = c

	}
	// t.Voters (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(br)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.Voters: %w", err)
		}

		t.Voters = c

	}
	return nil
}

var lengthBufCandidate = []byte{130}

func (t *Candidate) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufCandidate); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.BlockedEpoch (abi.ChainEpoch) (int64)
	if t.BlockedEpoch >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.BlockedEpoch)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.BlockedEpoch-1)); err != nil {
			return err
		}
	}

	// t.Votes (big.Int) (struct)
	if err := t.Votes.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *Candidate) UnmarshalCBOR(r io.Reader) error {
	*t = Candidate{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.BlockedEpoch (abi.ChainEpoch) (int64)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.BlockedEpoch = abi.ChainEpoch(extraI)
	}
	// t.Votes (big.Int) (struct)

	{

		if err := t.Votes.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Votes: %w", err)
		}

	}
	return nil
}

var lengthBufVoter = []byte{129}

func (t *Voter) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufVoter); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.VotingRecords (cid.Cid) (struct)

	if err := cbg.WriteCidBuf(scratch, w, t.VotingRecords); err != nil {
		return xerrors.Errorf("failed to write cid field t.VotingRecords: %w", err)
	}

	return nil
}

func (t *Voter) UnmarshalCBOR(r io.Reader) error {
	*t = Voter{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 1 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.VotingRecords (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(br)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.VotingRecords: %w", err)
		}

		t.VotingRecords = c

	}
	return nil
}

var lengthBufVotingRecord = []byte{131}

func (t *VotingRecord) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufVotingRecord); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Votes (big.Int) (struct)
	if err := t.Votes.MarshalCBOR(w); err != nil {
		return err
	}

	// t.RevokingVotes (big.Int) (struct)
	if err := t.RevokingVotes.MarshalCBOR(w); err != nil {
		return err
	}

	// t.LastRevokingEpoch (abi.ChainEpoch) (int64)
	if t.LastRevokingEpoch >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.LastRevokingEpoch)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.LastRevokingEpoch-1)); err != nil {
			return err
		}
	}
	return nil
}

func (t *VotingRecord) UnmarshalCBOR(r io.Reader) error {
	*t = VotingRecord{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 3 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Votes (big.Int) (struct)

	{

		if err := t.Votes.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Votes: %w", err)
		}

	}
	// t.RevokingVotes (big.Int) (struct)

	{

		if err := t.RevokingVotes.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.RevokingVotes: %w", err)
		}

	}
	// t.LastRevokingEpoch (abi.ChainEpoch) (int64)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.LastRevokingEpoch = abi.ChainEpoch(extraI)
	}
	return nil
}

var lengthBufRevokeParams = []byte{130}

func (t *RevokeParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufRevokeParams); err != nil {
		return err
	}

	// t.Candidate (address.Address) (struct)
	if err := t.Candidate.MarshalCBOR(w); err != nil {
		return err
	}

	// t.Votes (big.Int) (struct)
	if err := t.Votes.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *RevokeParams) UnmarshalCBOR(r io.Reader) error {
	*t = RevokeParams{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Candidate (address.Address) (struct)

	{

		if err := t.Candidate.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Candidate: %w", err)
		}

	}
	// t.Votes (big.Int) (struct)

	{

		if err := t.Votes.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Votes: %w", err)
		}

	}
	return nil
}

var lengthBufVoteParams = []byte{129}

func (t *VoteParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufVoteParams); err != nil {
		return err
	}

	// t.Candidate (address.Address) (struct)
	if err := t.Candidate.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *VoteParams) UnmarshalCBOR(r io.Reader) error {
	*t = VoteParams{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 1 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Candidate (address.Address) (struct)

	{

		if err := t.Candidate.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Candidate: %w", err)
		}

	}
	return nil
}
