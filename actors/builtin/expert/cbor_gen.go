// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package expert

import (
	"fmt"
	"io"

	abi "github.com/filecoin-project/go-state-types/abi"
	builtin "github.com/filecoin-project/specs-actors/v2/actors/builtin"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf

var lengthBufState = []byte{135}

func (t *State) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufState); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Info (cid.Cid) (struct)

	if err := cbg.WriteCidBuf(scratch, w, t.Info); err != nil {
		return xerrors.Errorf("failed to write cid field t.Info: %w", err)
	}

	// t.Datas (cid.Cid) (struct)

	if err := cbg.WriteCidBuf(scratch, w, t.Datas); err != nil {
		return xerrors.Errorf("failed to write cid field t.Datas: %w", err)
	}

	// t.VoteAmount (big.Int) (struct)
	if err := t.VoteAmount.MarshalCBOR(w); err != nil {
		return err
	}

	// t.LostEpoch (abi.ChainEpoch) (int64)
	if t.LostEpoch >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.LostEpoch)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.LostEpoch-1)); err != nil {
			return err
		}
	}

	// t.Status (expert.ExpertState) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Status)); err != nil {
		return err
	}

	// t.ImplicatedTimes (uint64) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.ImplicatedTimes)); err != nil {
		return err
	}

	// t.OwnerChange (cid.Cid) (struct)

	if err := cbg.WriteCidBuf(scratch, w, t.OwnerChange); err != nil {
		return xerrors.Errorf("failed to write cid field t.OwnerChange: %w", err)
	}

	return nil
}

func (t *State) UnmarshalCBOR(r io.Reader) error {
	*t = State{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 7 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Info (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(br)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.Info: %w", err)
		}

		t.Info = c

	}
	// t.Datas (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(br)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.Datas: %w", err)
		}

		t.Datas = c

	}
	// t.VoteAmount (big.Int) (struct)

	{

		if err := t.VoteAmount.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.VoteAmount: %w", err)
		}

	}
	// t.LostEpoch (abi.ChainEpoch) (int64)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.LostEpoch = abi.ChainEpoch(extraI)
	}
	// t.Status (expert.ExpertState) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Status = ExpertState(extra)

	}
	// t.ImplicatedTimes (uint64) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.ImplicatedTimes = uint64(extra)

	}
	// t.OwnerChange (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(br)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.OwnerChange: %w", err)
		}

		t.OwnerChange = c

	}
	return nil
}

var lengthBufExpertInfo = []byte{132}

func (t *ExpertInfo) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufExpertInfo); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Owner (address.Address) (struct)
	if err := t.Owner.MarshalCBOR(w); err != nil {
		return err
	}

	// t.Type (builtin.ExpertType) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Type)); err != nil {
		return err
	}

	// t.ApplicationHash (string) (string)
	if len(t.ApplicationHash) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.ApplicationHash was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.ApplicationHash))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.ApplicationHash)); err != nil {
		return err
	}

	// t.Proposer (address.Address) (struct)
	if err := t.Proposer.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *ExpertInfo) UnmarshalCBOR(r io.Reader) error {
	*t = ExpertInfo{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 4 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Owner (address.Address) (struct)

	{

		if err := t.Owner.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Owner: %w", err)
		}

	}
	// t.Type (builtin.ExpertType) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Type = builtin.ExpertType(extra)

	}
	// t.ApplicationHash (string) (string)

	{
		sval, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return err
		}

		t.ApplicationHash = string(sval)
	}
	// t.Proposer (address.Address) (struct)

	{

		if err := t.Proposer.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Proposer: %w", err)
		}

	}
	return nil
}

var lengthBufPendingOwnerChange = []byte{130}

func (t *PendingOwnerChange) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufPendingOwnerChange); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.ApplyEpoch (abi.ChainEpoch) (int64)
	if t.ApplyEpoch >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.ApplyEpoch)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.ApplyEpoch-1)); err != nil {
			return err
		}
	}

	// t.ApplyOwner (address.Address) (struct)
	if err := t.ApplyOwner.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *PendingOwnerChange) UnmarshalCBOR(r io.Reader) error {
	*t = PendingOwnerChange{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.ApplyEpoch (abi.ChainEpoch) (int64)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.ApplyEpoch = abi.ChainEpoch(extraI)
	}
	// t.ApplyOwner (address.Address) (struct)

	{

		if err := t.ApplyOwner.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.ApplyOwner: %w", err)
		}

	}
	return nil
}

var lengthBufConstructorParams = []byte{132}

func (t *ConstructorParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufConstructorParams); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Owner (address.Address) (struct)
	if err := t.Owner.MarshalCBOR(w); err != nil {
		return err
	}

	// t.ApplicationHash (string) (string)
	if len(t.ApplicationHash) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.ApplicationHash was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.ApplicationHash))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.ApplicationHash)); err != nil {
		return err
	}

	// t.Proposer (address.Address) (struct)
	if err := t.Proposer.MarshalCBOR(w); err != nil {
		return err
	}

	// t.Type (builtin.ExpertType) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Type)); err != nil {
		return err
	}

	return nil
}

func (t *ConstructorParams) UnmarshalCBOR(r io.Reader) error {
	*t = ConstructorParams{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 4 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Owner (address.Address) (struct)

	{

		if err := t.Owner.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Owner: %w", err)
		}

	}
	// t.ApplicationHash (string) (string)

	{
		sval, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return err
		}

		t.ApplicationHash = string(sval)
	}
	// t.Proposer (address.Address) (struct)

	{

		if err := t.Proposer.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Proposer: %w", err)
		}

	}
	// t.Type (builtin.ExpertType) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Type = builtin.ExpertType(extra)

	}
	return nil
}

var lengthBufGetControlAddressReturn = []byte{129}

func (t *GetControlAddressReturn) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufGetControlAddressReturn); err != nil {
		return err
	}

	// t.Owner (address.Address) (struct)
	if err := t.Owner.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *GetControlAddressReturn) UnmarshalCBOR(r io.Reader) error {
	*t = GetControlAddressReturn{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 1 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Owner (address.Address) (struct)

	{

		if err := t.Owner.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Owner: %w", err)
		}

	}
	return nil
}

var lengthBufExpertDataParams = []byte{131}

func (t *ExpertDataParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufExpertDataParams); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.RootID (string) (string)
	if len(t.RootID) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.RootID was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.RootID))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.RootID)); err != nil {
		return err
	}

	// t.PieceID (cid.Cid) (struct)

	if err := cbg.WriteCidBuf(scratch, w, t.PieceID); err != nil {
		return xerrors.Errorf("failed to write cid field t.PieceID: %w", err)
	}

	// t.PieceSize (abi.PaddedPieceSize) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.PieceSize)); err != nil {
		return err
	}

	return nil
}

func (t *ExpertDataParams) UnmarshalCBOR(r io.Reader) error {
	*t = ExpertDataParams{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 3 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.RootID (string) (string)

	{
		sval, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return err
		}

		t.RootID = string(sval)
	}
	// t.PieceID (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(br)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.PieceID: %w", err)
		}

		t.PieceID = c

	}
	// t.PieceSize (abi.PaddedPieceSize) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.PieceSize = abi.PaddedPieceSize(extra)

	}
	return nil
}

var lengthBufDataOnChainInfo = []byte{132}

func (t *DataOnChainInfo) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufDataOnChainInfo); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.RootID (string) (string)
	if len(t.RootID) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.RootID was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.RootID))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.RootID)); err != nil {
		return err
	}

	// t.PieceID (string) (string)
	if len(t.PieceID) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.PieceID was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.PieceID))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.PieceID)); err != nil {
		return err
	}

	// t.PieceSize (abi.PaddedPieceSize) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.PieceSize)); err != nil {
		return err
	}

	// t.Redundancy (uint64) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Redundancy)); err != nil {
		return err
	}

	return nil
}

func (t *DataOnChainInfo) UnmarshalCBOR(r io.Reader) error {
	*t = DataOnChainInfo{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 4 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.RootID (string) (string)

	{
		sval, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return err
		}

		t.RootID = string(sval)
	}
	// t.PieceID (string) (string)

	{
		sval, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return err
		}

		t.PieceID = string(sval)
	}
	// t.PieceSize (abi.PaddedPieceSize) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.PieceSize = abi.PaddedPieceSize(extra)

	}
	// t.Redundancy (uint64) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Redundancy = uint64(extra)

	}
	return nil
}

var lengthBufNominateExpertParams = []byte{129}

func (t *NominateExpertParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufNominateExpertParams); err != nil {
		return err
	}

	// t.Expert (address.Address) (struct)
	if err := t.Expert.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *NominateExpertParams) UnmarshalCBOR(r io.Reader) error {
	*t = NominateExpertParams{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 1 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Expert (address.Address) (struct)

	{

		if err := t.Expert.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Expert: %w", err)
		}

	}
	return nil
}

var lengthBufCheckStateReturn = []byte{130}

func (t *CheckStateReturn) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufCheckStateReturn); err != nil {
		return err
	}

	// t.AllowVote (bool) (bool)
	if err := cbg.WriteBool(w, t.AllowVote); err != nil {
		return err
	}

	// t.Qualified (bool) (bool)
	if err := cbg.WriteBool(w, t.Qualified); err != nil {
		return err
	}
	return nil
}

func (t *CheckStateReturn) UnmarshalCBOR(r io.Reader) error {
	*t = CheckStateReturn{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.AllowVote (bool) (bool)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajOther {
		return fmt.Errorf("booleans must be major type 7")
	}
	switch extra {
	case 20:
		t.AllowVote = false
	case 21:
		t.AllowVote = true
	default:
		return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
	}
	// t.Qualified (bool) (bool)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajOther {
		return fmt.Errorf("booleans must be major type 7")
	}
	switch extra {
	case 20:
		t.Qualified = false
	case 21:
		t.Qualified = true
	default:
		return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
	}
	return nil
}

var lengthBufOnTrackUpdateParams = []byte{129}

func (t *OnTrackUpdateParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufOnTrackUpdateParams); err != nil {
		return err
	}

	// t.Votes (big.Int) (struct)
	if err := t.Votes.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *OnTrackUpdateParams) UnmarshalCBOR(r io.Reader) error {
	*t = OnTrackUpdateParams{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 1 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Votes (big.Int) (struct)

	{

		if err := t.Votes.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Votes: %w", err)
		}

	}
	return nil
}

var lengthBufOnTrackUpdateReturn = []byte{130}

func (t *OnTrackUpdateReturn) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufOnTrackUpdateReturn); err != nil {
		return err
	}

	// t.ResetMe (bool) (bool)
	if err := cbg.WriteBool(w, t.ResetMe); err != nil {
		return err
	}

	// t.UntrackMe (bool) (bool)
	if err := cbg.WriteBool(w, t.UntrackMe); err != nil {
		return err
	}
	return nil
}

func (t *OnTrackUpdateReturn) UnmarshalCBOR(r io.Reader) error {
	*t = OnTrackUpdateReturn{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.ResetMe (bool) (bool)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajOther {
		return fmt.Errorf("booleans must be major type 7")
	}
	switch extra {
	case 20:
		t.ResetMe = false
	case 21:
		t.ResetMe = true
	default:
		return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
	}
	// t.UntrackMe (bool) (bool)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajOther {
		return fmt.Errorf("booleans must be major type 7")
	}
	switch extra {
	case 20:
		t.UntrackMe = false
	case 21:
		t.UntrackMe = true
	default:
		return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
	}
	return nil
}
