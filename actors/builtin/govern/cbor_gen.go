// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package govern

import (
	"fmt"
	"io"

	abi "github.com/filecoin-project/go-state-types/abi"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf

var lengthBufState = []byte{130}

func (t *State) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufState); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Supervisor (address.Address) (struct)
	if err := t.Supervisor.MarshalCBOR(w); err != nil {
		return err
	}

	// t.Governors (cid.Cid) (struct)

	if err := cbg.WriteCidBuf(scratch, w, t.Governors); err != nil {
		return xerrors.Errorf("failed to write cid field t.Governors: %w", err)
	}

	return nil
}

func (t *State) UnmarshalCBOR(r io.Reader) error {
	*t = State{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Supervisor (address.Address) (struct)

	{

		if err := t.Supervisor.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Supervisor: %w", err)
		}

	}
	// t.Governors (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(br)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.Governors: %w", err)
		}

		t.Governors = c

	}
	return nil
}

var lengthBufGrantedAuthorities = []byte{129}

func (t *GrantedAuthorities) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufGrantedAuthorities); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.CodeMethods (cid.Cid) (struct)

	if err := cbg.WriteCidBuf(scratch, w, t.CodeMethods); err != nil {
		return xerrors.Errorf("failed to write cid field t.CodeMethods: %w", err)
	}

	return nil
}

func (t *GrantedAuthorities) UnmarshalCBOR(r io.Reader) error {
	*t = GrantedAuthorities{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 1 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.CodeMethods (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(br)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.CodeMethods: %w", err)
		}

		t.CodeMethods = c

	}
	return nil
}

var lengthBufGrantOrRevokeParams = []byte{130}

func (t *GrantOrRevokeParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufGrantOrRevokeParams); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Governor (address.Address) (struct)
	if err := t.Governor.MarshalCBOR(w); err != nil {
		return err
	}

	// t.Authorities ([]govern.Authority) (slice)
	if len(t.Authorities) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Authorities was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Authorities))); err != nil {
		return err
	}
	for _, v := range t.Authorities {
		if err := v.MarshalCBOR(w); err != nil {
			return err
		}
	}
	return nil
}

func (t *GrantOrRevokeParams) UnmarshalCBOR(r io.Reader) error {
	*t = GrantOrRevokeParams{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Governor (address.Address) (struct)

	{

		if err := t.Governor.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Governor: %w", err)
		}

	}
	// t.Authorities ([]govern.Authority) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.Authorities: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Authorities = make([]Authority, extra)
	}

	for i := 0; i < int(extra); i++ {

		var v Authority
		if err := v.UnmarshalCBOR(br); err != nil {
			return err
		}

		t.Authorities[i] = v
	}

	return nil
}

var lengthBufAuthority = []byte{130}

func (t *Authority) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufAuthority); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.ActorCodeID (cid.Cid) (struct)

	if err := cbg.WriteCidBuf(scratch, w, t.ActorCodeID); err != nil {
		return xerrors.Errorf("failed to write cid field t.ActorCodeID: %w", err)
	}

	// t.Methods ([]abi.MethodNum) (slice)
	if len(t.Methods) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Methods was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Methods))); err != nil {
		return err
	}
	for _, v := range t.Methods {
		if err := cbg.CborWriteHeader(w, cbg.MajUnsignedInt, uint64(v)); err != nil {
			return err
		}
	}
	return nil
}

func (t *Authority) UnmarshalCBOR(r io.Reader) error {
	*t = Authority{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.ActorCodeID (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(br)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.ActorCodeID: %w", err)
		}

		t.ActorCodeID = c

	}
	// t.Methods ([]abi.MethodNum) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.Methods: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Methods = make([]abi.MethodNum, extra)
	}

	for i := 0; i < int(extra); i++ {

		maj, val, err := cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return xerrors.Errorf("failed to read uint64 for t.Methods slice: %w", err)
		}

		if maj != cbg.MajUnsignedInt {
			return xerrors.Errorf("value read for array t.Methods was not a uint, instead got %d", maj)
		}

		t.Methods[i] = abi.MethodNum(val)
	}

	return nil
}
